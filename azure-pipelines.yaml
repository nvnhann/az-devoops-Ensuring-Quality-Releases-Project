name: Azure Pipelines

trigger:
- main
pool: myPool

variables:
  python.version: '3.7.6'
  azureServiceConnectionId: 'a3a7c26e-4d37-405c-91fb-89548a312d92'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test'
  serviceConnection: 'a3a7c26e-4d37-405c-91fb-89548a312d92'


stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
      - task: TerraformInstaller@0
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: '0.13.5'
      
      - task: TerraformInstaller@0
        displayName: 'Terraform Init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          backendServiceArm: '$(terraformServiceConnection)'
          backendAzureRmResourceGroupName: '$(terraformstoragerg)'
          backendAzureRmStorageAccountName: '$(terraformstorageaccount)'
          backendAzureRmContainerName: '$(terraformcontainer)'
          backendAzureRmKey: 'terraform.tfstate'
          terraformVersion: '0.13.5'

      - task: TerraformInstaller@0
        displayName: 'Terraform Apply'
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          commandOptions: '-auto-approve -var="public_key=$(myPublicKey))"'
          environmentServiceNameAzureRM: '$(terraformServiceConnection)'

      - task: ArchiveFiles@2
        displayName: 'Archive FakeRestAPI Web App'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

      - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
        displayName: 'Upload Fakerestapi Package'
        artifact: drop-fakerestapi
      - task: ArchiveFiles@2
        displayName: 'Archive Selenium Tests'
        inputs:
          rootFolderOrFile: 'automatedtesting/selenium'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip'
      - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip
        displayName: 'Upload Selenium Package'
        artifact: selenium

- stage: WebAppDeployment
  displayName: Web App Deployment
  jobs:
  - deployment: FakeRestAPI
    pool: myPool
    environment: 'WAP-TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(serviceConnection)'
              appType: 'webApp'
              appName: 'fakeapiappkaizen'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
              deploymentMethod: 'auto'

- stage: Tests
  jobs: 
    - job: Tests
      displayName: 'Tests'
      steps:
      - task: Npm@1
        inputs:
          workingDir: '$(System.DefaultWorkingDirectory)'
          verbose: false
        displayName: 'Install Newman'
      - script: newman run ./automatedtesting/postman/testapi.postman_collection.json --reporters cli,junit --reporter-junit-export ./regressiontest.xml --suppress-exit-code
        displayName: 'Run Newman Regression Test'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      - task: PublishTestResults@2
        inputs:
          testResultsFiles: '$(System.DefaultWorkingDirectory)/*.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)'
        displayName: 'Publish Test Results'
      - task: JMeterInstaller@0
        inputs:
         jmeterVersion: '5.2.1'
        displayName: 'Install JMeter 5.2.1' 
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
             jmeter -n -t ./automatedtesting/jmeter/stress_test.jmx -l ./automatedtesting/jmeter/stress_test_result.csv -e -o ./automatedtesting/jmeter/stress_test_html_report/ -j ./automatedtesting/jmeter/jmeter_stress_test.log
        displayName: 'Jmeter Stress Test' 
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
             jmeter -n -t ./automatedtesting/jmeter/endurance_test.jmx -l ./automatedtesting/jmeter/Endurance_test_result.csv -e -o ./automatedtesting/jmeter/Endurance_test_html_report/ -j ./automatedtesting/jmeter/jmeter_endurance_test.log
        displayName: 'Jmeter Endurance Test' 
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: 'automatedtesting/jmeter'
          ArtifactName: 'jmeter'
          publishLocation: 'Container'

